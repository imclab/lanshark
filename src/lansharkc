#!/usr/bin/env python
# vim: set fileencoding=utf-8 :
"""lansharkc - command line interface to lanshark"""
from __future__ import with_statement
import errno
import os
import sys
import time

try:
    import signal
except:
    signal = None

from lanshark.config import config
config.set_prefix(os.path.abspath(os.path.join(
    os.path.dirname(__file__), os.pardir)))
from lanshark import lib

def discover():
    """Discover other hosts in the network"""
    for client in lib.discover():
        print "%s: %s" % client

def search(what):
    """Search for files"""
    what = what.decode(config.SYS_ENCODING)
    for result in lib.search(what):
        print result

def ls(url, recursive=False):
    """List directory contents resursive is optional"""
    if recursive:
        for url in lib.ls_r(url):
            print url
    else:
        listing = lib.ls_l(url)
        out = []
        for url, size, icon in listing:
            if url.endswith("/"):
                size = "%i Dirs %i Files" % tuple(size)
            else:
                size = lib.byteformat(size)
            out.append((size, url))
        maxsize = out and max([len(row[0]) for row in out]) or 0
        for row in out:
            print row[0].ljust(maxsize), row[1]

def get(url):
    """Download url if url is - read urls from stdin"""
    urls = []
    if url == "-":
        for line in sys.stdin:
            try:
                urls.append(line[line.index("http://"):].strip())
            except ValueError:
                pass
    else:
        urls.append(url)
    # flatten recursive urls
    for url in urls:
        if url.endswith("/"):
            urls.remove(url)
            for suburl in lib.ls_r(url):
                urls.append(suburl)
    # and finaly download them
    for url in urls:
        try:
            download = lib.download(url)
            dest, bytes = download.next()
            sys.stdout.write("downloading %s from %s \n%i bytes left"
                             % (url, dest, bytes))
            for downloaded in download:
                bytes -= downloaded
                sys.stdout.write(("\r%i bytes left"  % bytes).ljust(40))
                sys.stdout.flush()
            print ""
        except lib.DownloadException, e:
            print "skipping %s: %s" % (url, e.message)

def usage():
    """Show this help message"""
    print __doc__
    print "\nUsage: %s command [arguments...]" % sys.argv[0]
    print "\nCommands:"
    for cmd in commands:
        print (cmd.func_name + " " + " ".join(
                cmd.func_code.co_varnames[:cmd.func_code.co_argcount])).ljust(\
                        25) + cmd.__doc__
    print "\nConfig File:\n%s" % config.path
    sys.exit(1)

def version():
    """output copyright information and exit"""
    print lib.copyright

commands = (discover, download, usage, ls, search, version)

def main():
    if len(sys.argv) < 2:
        usage()
    command = None
    for cmd in commands:
        if cmd.func_name == sys.argv[1]:
            try:
                cmd(*sys.argv[2:])
                return
            except Exception, e:
                if config.debug:
                    import traceback
                    traceback.print_exc()
                print e.message
                usage()
    print "Unknown command"
    usage()

if __name__ == "__main__":
    main()
